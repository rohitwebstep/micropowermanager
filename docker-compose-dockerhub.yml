# Local setup using MicroPowerManager containers from DockerHub in production mode
services:
  backend:
    container_name: backend
    image: enaccess/micropowermanager-backend:latest
    env_file: ./dev/.env.micropowermanager-backend
    depends_on:
      redis:
        condition: service_started
    links:
      - redis:redis
    ports:
      - 8000:80
      - 8443:443
    volumes:
      - storage_data:/var/www/html/storage
    healthcheck:
      test: [CMD, curl, -f, http://localhost/up]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 100

  frontend:
    container_name: frontend
    image: enaccess/micropowermanager-frontend:latest
    env_file: ./dev/.env.micropowermanager-frontend
    ports:
      - 8001:80

  scheduler:
    container_name: scheduler
    image: enaccess/micropowermanager-scheduler:latest
    # micropowermanager-scheduler is a backend service and uses the same configuration as micropowermanager-backend
    env_file: ./dev/.env.micropowermanager-backend
    depends_on:
      redis:
        condition: service_started
    links:
      - redis:redis
    volumes:
      - storage_data:/var/www/html/storage

  # worker:
  #   container_name: worker
  #   restart: unless-stopped
  #   build:
  #     dockerfile: docker/DockerfileQueueWorker
  #   env_file: ./dev/.env.micropowermanager-backend
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #   links:
  #     - mysql:db
  #     - redis:redis
  #   volumes:
  #     - storage_data:/var/www/html/storage

  redis:
    container_name: redis
    image: redis:5
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379

volumes:
  redis_data:
  # storage volume is shared between services
  storage_data:
